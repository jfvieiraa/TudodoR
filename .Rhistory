legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
meu.plot <- p +
theme_minimal(16) +
labs(title ="Evolução dos Casos de Covid-19",
y = NULL,
x = NULL,
colour=NULL,
fill=NULL)+
theme(axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_blank(),
panel.background  = element_blank(),
panel.grid = element_blank(),
plot.margin  = unit(c(5,1.5,0,2), "cm"),
plot.background = element_blank(),
plot.title = element_text(size = 17,hjust = .3),
plot.subtitle = element_text(size = 12,hjust = .3),
legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
p
meu.plot <- p +
theme_minimal(16) +
labs(title ="Evolução dos Casos de Covid-19",
y = NULL,
x = NULL,
colour=NULL,
fill=NULL)+
theme(axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_blank(),
panel.background  = element_blank(),
panel.grid = element_blank(),
plot.margin  = unit(c(.2,3.5,0,2), "cm"),
plot.background = element_blank(),
plot.title = element_text(size = 17,hjust = .3),
plot.subtitle = element_text(size = 12,hjust = .3),
legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
p <- ggplot(dados) +
geom_bar(aes(y = confirmados,  x = rank,
group = cidade,colour = cidade, fill = cidade),
alpha = 0.75, stat = "identity",width =.6 )+
coord_flip(clip = "off", expand = FALSE)+ # eixo x torna-se y e y torna-se x
geom_image(image=paste0('ufac_.png'),
aes(x=7,y=0.75*max(confirmados)),
size=.2)+
geom_text(aes(y = 0, x= rank,label = paste(cidade, " ")),
size=2.0,vjust = 0.2, hjust = 1)+ # rotulo do eixo x
geom_text(aes(y=confirmados,x= rank,
label = paste(" ",confirmados), hjust=0),size=4.5)+ # rotulo dos dados
scale_x_reverse()
ultimo.dia.ok <- paste0(day(ultimo.dia)," de ",
month(ultimo.dia,label = TRUE,abbr = FALSE),
" de ",year(ultimo.dia))
meu.plot <- p +
theme_minimal(16) +
labs(title ="Evolução dos Casos de Covid-19",
y = NULL,
x = NULL,
colour=NULL,
fill=NULL)+
theme(axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_blank(),
panel.background  = element_blank(),
panel.grid = element_blank(),
plot.margin  = unit(c(.2,3.5,0,2), "cm"),
plot.background = element_blank(),
plot.title = element_text(size = 17,hjust = .3),
plot.subtitle = element_text(size = 12,hjust = .3),
legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
p <- ggplot(dados) +
geom_bar(aes(y = confirmados,  x = rank,
group = cidade,colour = cidade, fill = cidade),
alpha = 0.75, stat = "identity",width =.6 )+
coord_flip(clip = "off", expand = FALSE)+ # eixo x torna-se y e y torna-se x
geom_image(image=paste0('ufac_.png'),
aes(x=7,y=0.75*max(confirmados)),
size=.2)+
geom_text(aes(y = 0, x= rank,label = paste(cidade, " ")),
size=4.0,vjust = 0.2, hjust = 1)+ # rotulo do eixo x
geom_text(aes(y=confirmados,x= rank,
label = paste(" ",confirmados), hjust=0),size=4.5)+ # rotulo dos dados
scale_x_reverse()
ultimo.dia.ok <- paste0(day(ultimo.dia)," de ",
month(ultimo.dia,label = TRUE,abbr = FALSE),
" de ",year(ultimo.dia))
meu.plot <- p +
theme_minimal(16) +
labs(title ="Evolução dos Casos de Covid-19",
y = NULL,
x = NULL,
colour=NULL,
fill=NULL)+
theme(axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_blank(),
panel.background  = element_blank(),
panel.grid = element_blank(),
plot.margin  = unit(c(.2,3.5,0,2), "cm"),
plot.background = element_blank(),
plot.title = element_text(size = 17,hjust = .3),
plot.subtitle = element_text(size = 12,hjust = .3),
legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
animate(plot = meu.plot,duration = 12, fps = 2) # controla a animacao
animate(plot = meu.plot,duration = 12, fps = 8) # controla a animacao
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
dados <- read.csv2(paste0("covid19-acre_2004.csv")) %>%
mutate(data=ymd(data)) %>%
group_by(day(data))%>% # agrupando os dados por dia
# fazendo um ranking ao contrario
# multiplica-se o resultado por 1 para que nao
# exista numeros inteiros durante a animacao
mutate(rank = min_rank(-confirmados)*1) %>%
ungroup() %>% #desagrupando
filter(rank<=7) # selecionando os 10 Estados c/ maior # de casos
ultimo.dia <- dados %>%
filter(cidade=="Acre") %>%
pull(data) %>%
last() %>%
as.character()
p <- ggplot(dados) +
geom_bar(aes(y = confirmados,  x = rank,
group = cidade,colour = cidade, fill = cidade),
alpha = 0.75, stat = "identity",width =.6 )+
coord_flip(clip = "off", expand = FALSE)+ # eixo x torna-se y e y torna-se x
geom_image(image=paste0('ufac_.png'),
aes(x=7,y=0.75*max(confirmados)),
size=.2)+
geom_text(aes(y = 0, x= rank,label = paste(cidade, " ")),
size=4.0,vjust = 0.2, hjust = 1)+ # rotulo do eixo x
geom_text(aes(y=confirmados,x= rank,
label = paste(" ",confirmados), hjust=0),size=4.5)+ # rotulo dos dados
scale_x_reverse()
ultimo.dia.ok <- paste0(day(ultimo.dia)," de ",
month(ultimo.dia,label = TRUE,abbr = FALSE),
" de ",year(ultimo.dia))
meu.plot <- p +
theme_minimal(16) +
labs(title ="Evolução dos Casos de Covid-19",
y = NULL,
x = NULL,
colour=NULL,
fill=NULL)+
theme(axis.ticks.y = element_blank(),
axis.text.y  = element_blank(),
axis.text.x  = element_blank(),
panel.background  = element_blank(),
panel.grid = element_blank(),
plot.margin  = unit(c(.2,3.5,0,2), "cm"),
plot.background = element_blank(),
plot.title = element_text(size = 17,hjust = .3),
plot.subtitle = element_text(size = 12,hjust = .3),
legend.position = "top",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())+
geom_text(aes(y = 0.7*max(confirmados),
x =9.8, label =paste0(day(data)," de ",
month(data,label = TRUE,abbr = FALSE),
" de ",year(data))),
size = 9, col = "#828285")+
guides(fill = guide_legend(override.aes = list(color = NULL,
size=3.2)))+
transition_time(data)+ # aqui acontece a animacao
ease_aes('cubic-in-out')
animate(plot = meu.plot,duration = 12, fps = 4) # controla a animacao
animate(plot = meu.plot,duration = 12, fps = 10) # controla a animacao
animate(plot = meu.plot,duration = 20, fps = 10) # controla a animacao
#Carregar os seguintes pacotes:
library(installr)
library(ForestTools)
library(raster)
library(rgeos)
#Carregar dado de área florestal a ser analisada:
data("kootenayCHM")
#Plotar o CHM (CHM, modelo de altura do dossel):
plot(kootenayCHM)
#Identificar copas de árvore dominantes. Esta função implementa o algoritmo de filtro de janela variável desenvolvido por Popescu e Wynne (2004):
lin <- function(x){x * 0.05 + 0.6}
ttops <- vwf(CHM = kootenayCHM, winFun = lin, minHeight = 2)
#Plotar o CHM:
plot(kootenayCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Adicionar as copas das árvores dominantes identificadas a partir do algoritimo no plot CHM:
plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
#Ver a altura média das copas calculadas:
mean(ttops$height)
#Os modelos de altura do dossel geralmente representam florestas densas e contínuas, onde as copas das árvores se encostam umas nas outras. O esboço de formas discretas de coroas a partir desse tipo de floresta costuma ser chamado de segmentação de copa, onde cada contorno de coroa é representado por um segmento. Depois que um conjunto de copas das árvores é detectado a partir de um modelo de altura do dossel, a função mcws pode ser usada para essa finalidade.
#Criar mapa de coroas com a função mcws:
crowns <- mcws(treetops = ttops, CHM = kootenayCHM, minHeight = 1.5, verbose = FALSE)
# Plotar as coroas:
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Por padrão, mcws retorna uma varredura, na qual cada coroa recebe um valor único de célula. Dependendo da finalidade do mapa da coroa, pode ser preferível armazenar esses contornos como polígonos. Definir o argumento de formato como "polígonos" converterá o mapa de coroa rasterizado em um conjunto de polígonos. Como um benefício adicional, esses polígonos herdarão os atributos das copas das árvores a partir das quais foram gerados, como a altura. Além disso, um atributo extra, crownArea, será calculado para cada polígono.
#Criar mapa de poligonos a partir das coroas:
crownsPoly <- mcws(treetops = ttops, CHM = kootenayCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
#Plotar o grid:
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Os modelos de altura do dossel geralmente representam florestas densas e contínuas, onde as copas das árvores se encostam umas nas outras. O esboço de formas discretas de coroas a partir desse tipo de floresta costuma ser chamado de segmentação de copa, onde cada contorno de coroa é representado por um segmento. Depois que um conjunto de copas das árvores é detectado a partir de um modelo de altura do dossel, a função mcws pode ser usada para essa finalidade.
#Criar mapa de coroas com a função mcws:
crowns <- mcws(treetops = ttops, CHM = kootenayCHM, minHeight = 1.5, verbose = FALSE)
# Plotar as coroas:
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Por padrão, mcws retorna uma varredura, na qual cada coroa recebe um valor único de célula. Dependendo da finalidade do mapa da coroa, pode ser preferível armazenar esses contornos como polígonos. Definir o argumento de formato como "polígonos" converterá o mapa de coroa rasterizado em um conjunto de polígonos. Como um benefício adicional, esses polígonos herdarão os atributos das copas das árvores a partir das quais foram gerados, como a altura. Além disso, um atributo extra, crownArea, será calculado para cada polígono.
#Criar mapa de poligonos a partir das coroas:
crownsPoly <- mcws(treetops = ttops, CHM = kootenayCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
#Plotar o CHM
plot(kootenayCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Adicionar os poligonos das coroas no CHM:
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
#A função sp_summarise pode ser usada para contar árvores em um conjunto de unidades espaciais, bem como calcular estatísticas dos atributos das árvores.
#Calcular o número de árvores:
sp_summarise(ttops)
#As copas das árvores também podem ser usadas como entrada. Ao definir o argumento das variáveis, sp_summarise gerará estatísticas resumidas dos atributos das árvores. Por padrão, a média, mediana, desvio padrão, mínimo e máximo são calculados, mas funções personalizadas também podem ser usadas.
#Visualizar atributos estatísticos das árvores:
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
#Computar estatísticas de contagem da altura das árvores para blocos de corte:
blockStats <- sp_summarise(ttops, areas = kootenayBlocks, variables = "height")
#Plotar o CHM:
plot(kootenayCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Adicionar os blocos no plot:
plot(kootenayBlocks, add = TRUE, border =  "darkmagenta", lwd = 2)
#Adicionar a contagem de números de árvores para cada bloco (área definida):
text(gCentroid(kootenayBlocks, byid = TRUE), blockStats[["TreeCount"]], col = "darkmagenta", font = 2)
#Ver dados estatísticos:
blockStats@data
#Gerar a altura média das árvores dentro da grade de células de 10 m x 10 m em um arquivo raster:
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
#Ver o nome das layers:
names(gridStats)
#Plotar o grid:
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#Carregar pacote:
library(lidR)
library(raster)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS("https://www.dropbox.com/s/e7mlo11k5qeao2i/Example.las?dl=0")
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS("https://www.dropbox.com/s/e7mlo11k5qeao2i/Example.las?dl=1")
plot(las)
#O lasground fornece vários algoritmos para classificar os pontos de referência. Essa função é conveniente para gráficos de pequeno a médio porte, como o que estamos processando.
#Classificar pontos do solo (pontos de referência):
las = lasground(las, csf())
plot(las, color = "Classification")
#É necessário Precisamos definir o terreno em 0 metros. Deve-se subtrair o MDT para obter pontos de aterramento em 0, mas aqui não será usado um MDT, mas vamos interpolar exatamente cada ponto.
#Definir altura normalizada:
las = lasnormalize(las, tin())
plot(las)
#Na próxima etapa, será usado um algoritmo que requer um modelo de altura da copa a partir da nuvem de pontos.
#Calcular um modelo de altura das copas:
algo = pitfree(thresholds = c(0,10,20,30,40,50), subcircle = 0.2)
chm  = grid_canopy(las, 0.5, algo)
#Plotar o CHM:
plot(chm, col = height.colors(50))
#A segmentação pode ser alcançada com lastrees. Aqui foi escolhido o algoritmo de bacia com um limiar de 4 metros. A nuvem de pontos foi atualizada e cada ponto agora tem um número que se refere a uma árvore individual (treeID). Pontos que não são árvores recebem o valor de ID NA.
#Realizar a segmentação das árvores:
algo = watershed(chm, th = 4)
las  = lastrees(las, algo)
# remove points that are not assigned to a tree
trees = lasfilter(las, !is.na(treeID))
#Plotar a segmentação:
plot(trees, color = "treeID", colorPalette = pastel.colors(100))
#Calcular algumas métricas:
hulls  = tree_hulls(las, func = .stdmetrics)
spplot(hulls, "zmax")
#No exemplo anterior, mesmo se a segmentação for feita usando um modelo de altura do dossel, a classificação foi feita na nuvem de pontos. Isso ocorre porque lidR é uma biblioteca orientada à nuvem de pontos. Mas pode-se querer que o raster trabalhe com rasters. Nesse caso, a função divisor de águas pode ser usada de forma independente:
crowns = watershed(chm, th = 4)()
plot(crowns, col = pastel.colors(100))
#Criar poligonos de contornos a partir da copa:
contour = rasterToPolygons(crowns, dissolve = TRUE)
#Plotar o CHM e contornos:
plot(chm, col = height.colors(50))
plot(contour, add = T)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS("https://www.dropbox.com/s/e7mlo11k5qeao2i/Example.las?dl=1")
las = readLAS("https://www.dropbox.com/s/e7mlo11k5qeao2i/Example.las?dl=0")
#Carregar pacote:
library(lidR)
library(raster)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS("https://www.dropbox.com/s/e7mlo11k5qeao2i/Example.las?dl=1")
plot(las)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS(Example.las)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS(C:/Users/Jefferson/Dropbox/Livro/Example.las)
#Carregar uma área florestal de exemplo a partir de imagens LIDAR que será trabalhada:
las = readLAS('C:/Users/Jefferson/Dropbox/Livro/Example.las')
plot(las)
cota<-c(1,2,3,4,5,6,7,8,9,10)
volume<-c(7,10,14,20,31,40,58,84,113,165)
dados<-data.frame(cota,volume)
plot(dados)
funcao <- volume~a*exp(b*cota)
exponencial <- nls(funcao, #modelo que se deseja ajustar($)
dados, #data.frame com o conjunto de dados
start=c(a=1,b=1)) #valores iniciais dos parâmetros($$)
summary(exponencial)
plot(dados)
curve(5.1163887*exp(0.34672*x), 1, #limite inferior eixo das abscissas
10, #limite superior
add=T, #acrescentar no gráfico anterior
col=2) #cor da curva (2 = vermelha)
cra <- read.table("http://www.leg.ufpr.br/~paulojus/dados/cra.csv", head = T, sep = ",")
head(cra)
cra <- transform(cra, am = as.factor(am))
summary(cra)
cra30 <- subset(cra, am == "41")
cra30
with(cra30, plot(u ~ log10(pot), xlab = expression(log[10](Psi[m])), ylab = expression(theta), ylim = c(0, 0.7)))
with(cra30, plot(u ~ pot, xlab = expression(Psi[m]), ylab = expression(theta),ylim = c(0,0.7))) curve(0.05 + (0.35 - 0.05)/((1 + (0.1 * x)^1.3)^(1 - 1/1.3)), from = 0,
with(cra30, plot(u ~ pot, xlab = expression(Psi[m]),
ylab = expression(theta),
ylim = c(0,0.7)))
curve(0.05 + (0.35 - 0.05)/((1 + (0.1 * x)^1.3)^(1 - 1/1.3)), from = 0,
to = 27000, add = T, lty = 2)
fit30 = nls(u ~ ur + (us - ur)/((1 + (alpha * pot)^n)^(1 - 1/n)), data = cra30, start = list(us = 0.35, ur = 0.05, alpha = 0.1, n = 1.3))
summary(fit30)
install.packages("ggfortify")
roo <- read.csv2("https://www.dropbox.com/s/1ajoi1c8pla3yk6/roo.csv?dl=1")
head(roo)
library(dplyr)
selecionar <- select(roo,ano,Tmax)
head(selecionar)
dados <- select (roo,-UR)
head(dados)
dados_criticos <- filter(roo,Tmin < 20, UR <30 )
head(dados_criticos)
dados <- mutate(roo, Tmd = ((Tmax + Tmin )/2))
head(dados)
trmm <- read.csv2(file ="https://www.dropbox.com/s/hf80ptt7lm6kbdb/roo_trmm.csv?dl=1", sep = "," )
roo <- read.csv2("https://www.dropbox.com/s/1ajoi1c8pla3yk6/roo.csv?dl=1")
roo <- read.csv2("https://www.dropbox.com/s/1ajoi1c8pla3yk6/roo.csv?dl=1")
head(roo)
tail(roo)
install_github('sinhrks/ggfortify')
library(devtools)
library(devtools)
require(ggfortify) #will plot the ts objects as ggplot2
autoplot(meuts) # time series on facets
autoplot(meuts, facets = F) #time series of stocks on one plot
library(dplyr)
library(broom)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("tibble")
install.packages("tibble")
library(tibble)
library(Kendall)
require(trend)
install.packages("Kendall")
install.packages("trend")
roo <- read.csv2 ("https://www.dropbox.com/s/1ajoi1c8pla3yk6/roo.csv?dl=1")
install.packages("FIELDimageR")
install.packages("FIELDimageR")
install.packages("FIELDimageR")
knitr::opts_chunk$set(echo = TRUE)
library(FIELDimageR)
install_github("filipematias23/FIELDimageR")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("filipematias23/FIELDimageR")
library(FIELDimageR)
library(raster)
EX1<-stack("https://www.dropbox.com/s/qxg6fn9ljy35ssm/EX1_RGB.tif?dl=1")
library(raster)
library(raster)
install.packages(c("broom", "cartography", "dbplyr", "fdth", "ggpmisc", "lidR", "plotrix", "purrr", "raster", "RcppArmadillo", "rex", "sf", "timetk", "tinytex", "withr", "xfun", "xml2"))
install.packages(c("broom", "cartography", "dbplyr", "fdth", "ggpmisc", "lidR", "plotrix", "purrr", "raster", "RcppArmadillo", "rex", "sf", "timetk", "tinytex", "withr", "xfun", "xml2"))
install.packages("raster")
install.packages("raster")
library(FIELDimageR)
library(FIELDimageR)
library(raster)
library(devtools)
library(FIELDimageR)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("filipematias23/FIELDimageR")
library(FIELDimageR)
EX1<-stack("https://www.dropbox.com/s/qxg6fn9ljy35ssm/EX1_RGB.tif?dl=1")
EX1<-stack("https://www.dropbox.com/s/qxg6fn9ljy35ssm/EX1_RGB.tif?dl=1")
plotRGB(EX1, r = 1, g = 2, b = 3)
library(FIELDimageR)
install.packages("RCurl")
install.packages("RCurl")
library(raster)
library(knitr)
library(sp)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(raster)
library(knitr)
library(sp)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
imagesentinel=raster('D:/livro/TudodoRa/sentinel2.tif')
imagesentinel=raster('sentinel2.tif')
imagesentinel
install.packages("sp", dependency=TRUE)
install.packages("sp", dependency = TRUE)
install.packages("devtools", dependency=TRUE)
install.packages("devtools", dependency=TRUE)
library(devtools)
install_github("filipematias23/FIELDimageR")
install.packages("sp", dependency=TRUE)
install.packages("raster", dependency=TRUE)
install.packages("rgdal", dependency=TRUE)
install.packages("sp", dependency = TRUE)
install.packages("sp", dependency = TRUE)
install.packages("sp", dependency = TRUE)
library(FIELDimageR)
library(FIELDimageR)
library(raster)
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
a = read.table("https://www.dropbox.com/s/qixbu9tqnnfsuyt/a.txt?dl=1", sep=";", head=T)
head(a)
a$Data = as.Date(a$Data)
a$DiaJuliano = as.numeric(format(a$Data, trim = T, '%j'))
head(a)
install.packages("Evapotranspiration")
require(Evapotranspiration)
df <- read.table("https://www.dropbox.com/s/qixbu9tqnnfsuyt/a.txt?dl=1",header = T,sep = ";")
names(data)
climate <- lapply(as.list(df)[2:7], zoo, df$Data)
J       <- as.numeric(format(df$Data, "%j"))
data    <- c(list(Date.daily=df$Data, J=J), climate)
df <- read.table("https://www.dropbox.com/s/qixbu9tqnnfsuyt/a.txt?dl=1",header = T,sep = ";")
climate <- lapply(as.list(df)[2:7], zoo, df$Data)
J       <- as.numeric(format(df$Data, "%j"))
data    <- c(list(Date.daily=df$Data, J=J), climate)
df <- read.table("https://www.dropbox.com/s/qixbu9tqnnfsuyt/a.txt?dl=1",header = T,sep = ";")
require(Evapotranspiration)
df <- read.table("https://www.dropbox.com/s/qixbu9tqnnfsuyt/a.txt?dl=1",header = T,sep = ";")
climate <- lapply(as.list(df)[2:7], zoo, df$Data)
J       <- as.numeric(format(df$Data, "%j"))
View(df)
climate <- lapply(as.list(df)[2:7], zoo, df$Data)
J       <- as.numeric(format(df$Data, "%j"))
data    <- c(list(Date.daily=df$Data, J=J), climate)
names(data)
df$Data <- as.Date(df$Data)
climate <- lapply(as.list(df)[2:7], zoo, df$Data)
J       <- as.numeric(format(df$Data, "%j"))
data    <- c(list(Date.daily=df$Data, J=J), climate)
names(data)
str(data)
